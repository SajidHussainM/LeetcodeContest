/*


2610. Convert an Array Into a 2D Array With Conditions
User Accepted:8806
User Tried:9484
Total Accepted:8983
Total Submissions:10934
Difficulty:Medium
You are given an integer array nums. You need to create a 2D array from nums satisfying the following conditions:

The 2D array should contain only the elements of the array nums.
Each row in the 2D array contains distinct integers.
The number of rows in the 2D array should be minimal.
Return the resulting array. If there are multiple answers, return any of them.

Note that the 2D array can have a different number of elements on each row.

 

Example 1:

Input: nums = [1,3,4,1,2,3,1]
Output: [[1,3,4,2],[1,3],[1]]
Explanation: We can create a 2D array that contains the following rows:
- 1,3,4,2
- 1,3
- 1
All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.
It can be shown that we cannot have less than 3 rows in a valid array.
Example 2:

Input: nums = [1,2,3,4]
Output: [[4,3,2,1]]
Explanation: All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= nums.length

*/



class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>> ans;
        map<int,int> mp;

        for(auto it : nums)
            mp[it]++;

        while(true){
            bool flag = true;
            vector<int> temp;

            /* The & character is used to create a reference to each element in the mp map, instead of creating a copy of each element.
            n this specific case, the reference is used to modify the value of the second field of each key-value pair in the mp map. Without the use of &, the loop would create a copy of each element in mp and any modifications to the copy would not be reflected in the original map.

            */

            
            for(auto& it : mp){
                if(it.second > 0){
                flag = false;
                temp.push_back(it.first);
                it.second--;
                }
            }

            if(flag) break;

            ans.push_back(temp);
        }

        return ans;
    }
};
